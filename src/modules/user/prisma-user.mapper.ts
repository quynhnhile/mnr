// import { Mapper } from '@libs/ddd';
// import { User as UserModel } from '@prisma/client';
// import { UserEntity } from './domain/user.entity';
// import { UserRoles } from './domain/user.types';
// import { Address } from './domain/value-objects/address.value-object';
// import { UserResponseDto } from './dtos/user.response.dto';

// /**
//  * Mapper constructs objects that are used in different layers:
//  * Model is an object that is stored in a database (type generated by Prisma),
//  * Entity is an object that is used in application domain layer,
//  * and a ResponseDTO is an object returned to a user (usually as json).
//  */

// export class PrismaUserMapper
//   implements Mapper<UserEntity, UserModel, UserResponseDto>
// {
//   toPersistence(entity: UserEntity): UserModel {
//     const copy = entity.getProps();
//     const record: UserModel = {
//       id: copy.id,
//       createdAt: copy.createdAt,
//       updatedAt: copy.updatedAt,
//       email: copy.email,
//       country: copy.address.country,
//       postalCode: copy.address.postalCode,
//       street: copy.address.street,
//       role: copy.role,
//     };
//     return record;
//   }

//   toDomain(record: UserModel): UserEntity {
//     return new UserEntity({
//       id: record.id,
//       createdAt: new Date(record.createdAt),
//       updatedAt: new Date(record.updatedAt),
//       props: {
//         email: record.email,
//         role: record.role as UserRoles,
//         address: new Address({
//           street: record.street,
//           postalCode: record.postalCode,
//           country: record.country,
//         }),
//       },
//     });
//   }

//   toResponse(entity: UserEntity): UserResponseDto {
//     const props = entity.getProps();
//     const response = new UserResponseDto(entity);
//     response.email = props.email;
//     response.country = props.address.country;
//     response.postalCode = props.address.postalCode;
//     response.street = props.address.street;
//     return response;
//   }

//   /* ^ Data returned to the user is whitelisted to avoid leaks.
//        If a new property is added, like password or a
//        credit card number, it won't be returned
//        unless you specifically allow this.
//        (avoid blacklisting, which will return everything
//         but blacklisted items, which can lead to a data leak).
//     */
// }
